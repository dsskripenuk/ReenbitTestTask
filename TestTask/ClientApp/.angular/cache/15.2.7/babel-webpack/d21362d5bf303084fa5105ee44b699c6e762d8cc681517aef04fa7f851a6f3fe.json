{"ast":null,"code":"const eitherRect = (rect, offset) => {\n  if (!rect) {\n    return {\n      height: 0,\n      left: offset.left,\n      top: offset.top,\n      width: 0\n    };\n  }\n  return rect;\n};\nconst scaleRect = (rect, scale) => {\n  if (!rect || scale === 1) {\n    return rect;\n  }\n  return {\n    height: rect.height / scale,\n    left: rect.left / scale,\n    top: rect.top / scale,\n    width: rect.width / scale\n  };\n};\nconst removeStackingOffset = (rect, stackingOffset) => {\n  if (!stackingOffset) {\n    return rect;\n  }\n  const result = {\n    height: rect.height,\n    left: rect.left - stackingOffset.left,\n    top: rect.top - stackingOffset.top,\n    width: rect.width\n  };\n  return result;\n};\nfunction memoize(fun) {\n  let result;\n  let called = false;\n  return (...args) => {\n    if (called) {\n      return result;\n    }\n    result = fun(...args);\n    called = true;\n    return result;\n  };\n}\nconst hasRelativeStackingContext = memoize(elementSource => {\n  if (!canUseDOM()) {\n    return false;\n  }\n\n  // Component need to pass element to make sure document owner is correct.\n  // This however might be performance hit if checked for example on each drag event.\n  const currentDocument = elementSource ? elementSource.ownerDocument : document;\n  if (!currentDocument || !currentDocument.body) {\n    return false;\n  }\n  const top = 10;\n  const parent = currentDocument.createElement(\"div\");\n  parent.style.transform = \"matrix(10, 0, 0, 10, 0, 0)\";\n  parent.innerHTML = `<div style=\"position: fixed; top: ${top}px;\">child</div>`;\n  currentDocument.body.appendChild(parent);\n  const isDifferent = parent.children[0].getBoundingClientRect().top !== top;\n  currentDocument.body.removeChild(parent);\n  return isDifferent;\n});\nconst canUseDOM = () => Boolean(\n// from fbjs\ntypeof window !== 'undefined' && window.document && window.document.createElement);\nconst utils = {\n  eitherRect,\n  scaleRect,\n  removeStackingOffset,\n  hasRelativeStackingContext,\n  canUseDOM\n};\nexport default utils;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}