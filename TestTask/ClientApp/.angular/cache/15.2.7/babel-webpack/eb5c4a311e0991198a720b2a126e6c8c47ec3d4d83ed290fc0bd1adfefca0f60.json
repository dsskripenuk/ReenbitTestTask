{"ast":null,"code":"/**-----------------------------------------------------------------------------------------\n* Copyright © 2023 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport * as i0 from '@angular/core';\nimport { Injectable, Directive, InjectionToken, Inject, Optional } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { skip, map, tap } from 'rxjs/operators';\n\n/**\n * A base class for a service that returns localized messages.\n *\n * For more information, refer to the section on [using the message service]({% slug messages_l10n %}#toc-using-the-message-service).\n */\nlet MessageService = /*#__PURE__*/(() => {\n  class MessageService {\n    /**\n     * @hidden\n     */\n    constructor() {\n      /**\n       * @hidden\n       */\n      this.changes = new BehaviorSubject({\n        rtl: undefined\n      });\n      /* noop */\n    }\n    /**\n     * Notifies the components that the messages were changed.\n     *\n     * @param rtl - (Optional) A new value for the [text direction token]({% slug api_l10n_rtl %}).\n     */\n    notify(rtl) {\n      this.changes.next({\n        rtl\n      });\n    }\n    /**\n     * Returns a localized message for the supplied key.\n     *\n     * @param _key - The message key. For example, `\"kendo.grid.noRecords\"`.\n     * @return - The localized message for this key or `undefined` if not found.\n     */\n    get(_key) {\n      return undefined;\n    }\n  }\n  MessageService.ɵfac = function MessageService_Factory(t) {\n    return new (t || MessageService)();\n  };\n  MessageService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MessageService,\n    factory: MessageService.ɵfac\n  });\n  return MessageService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Base class that acts as a component messages container.\n *\n * For internal use.\n * @hidden\n */\nlet ComponentMessages = /*#__PURE__*/(() => {\n  class ComponentMessages {\n    get override() {\n      return false;\n    }\n    ngOnChanges(changes) {\n      this.register(changes);\n      if (Object.keys(changes).some(field => !changes[field].isFirstChange())) {\n        this.service.notifyChanges();\n      }\n    }\n    ngOnInit() {\n      this.subscription = this.service.changes.pipe(skip(1)).subscribe(() => this.register(this));\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    register(changes) {\n      const keys = Object.keys(changes);\n      keys.forEach(key => this.service.register(key, this[key], this.override));\n    }\n    ngOnDestroy() {\n      if (this.subscription) {\n        this.subscription.unsubscribe();\n      }\n    }\n  }\n  ComponentMessages.ɵfac = function ComponentMessages_Factory(t) {\n    return new (t || ComponentMessages)();\n  };\n  ComponentMessages.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: ComponentMessages,\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n  return ComponentMessages;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * A token that specifies the text direction of Kendo UI for Angular components.\n *\n * @example\n * {% embed_file rtl/app.module.ts preview %}\n * {% embed_file rtl/app.component.ts %}\n * {% embed_file shared/main.ts hidden %}\n *\n */\nconst RTL = new InjectionToken(\"Kendo UI Right-to-Left token\");\n\n/**\n * Localization prefix for the component messages.\n *\n * For internal use.\n * @hidden\n */\nconst L10N_PREFIX = new InjectionToken('Localization key prefix');\n/**\n * Component localization service.\n *\n * For internal use.\n * @hidden\n */\nlet LocalizationService = /*#__PURE__*/(() => {\n  class LocalizationService {\n    constructor(prefix, messageService, _rtl) {\n      this.prefix = prefix;\n      this.messageService = messageService;\n      this._rtl = _rtl;\n      this.changes = new BehaviorSubject({\n        rtl: this._rtl\n      });\n      this.dictionary = {};\n      if (messageService) {\n        this.subscription = messageService.changes.pipe(map(({\n          rtl\n        }) => rtl !== undefined ? rtl : this._rtl), tap(rtl => this._rtl = rtl)).subscribe(rtl => {\n          this.dictionary = {};\n          this.changes.next({\n            rtl\n          });\n        });\n      }\n    }\n    get rtl() {\n      return this._rtl;\n    }\n    ngOnDestroy() {\n      if (this.subscription) {\n        this.subscription.unsubscribe();\n      }\n    }\n    get(shortKey) {\n      const key = this.key(shortKey);\n      return this.dictionary[key];\n    }\n    register(shortKey, value, override = false) {\n      const key = this.key(shortKey);\n      let message = value;\n      if (!override) {\n        if (Object.hasOwnProperty.call(this.dictionary, key)) {\n          return;\n        }\n        message = this.defaultValue(key, value);\n      }\n      this.dictionary[key] = message;\n    }\n    notifyChanges() {\n      this.changes.next({\n        rtl: this.rtl\n      });\n    }\n    key(shortKey) {\n      return this.prefix + '.' + shortKey;\n    }\n    defaultValue(key, value) {\n      if (!this.messageService) {\n        return value;\n      }\n      const alt = this.messageService.get(key);\n      return alt === undefined ? value : alt;\n    }\n  }\n  LocalizationService.ɵfac = function LocalizationService_Factory(t) {\n    return new (t || LocalizationService)(i0.ɵɵinject(L10N_PREFIX), i0.ɵɵinject(MessageService, 8), i0.ɵɵinject(RTL, 8));\n  };\n  LocalizationService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: LocalizationService,\n    factory: LocalizationService.ɵfac\n  });\n  return LocalizationService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ComponentMessages, L10N_PREFIX, LocalizationService, MessageService, RTL };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}