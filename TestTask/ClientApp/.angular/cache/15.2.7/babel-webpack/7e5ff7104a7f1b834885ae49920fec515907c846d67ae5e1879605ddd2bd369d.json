{"ast":null,"code":"/* eslint-disable arrow-body-style */\n\nimport utils from './utils';\nimport domUtils from \"./dom-utils\";\nconst absoluteRect = (anchor, element, offset, scale) => {\n  const scrollPos = elementScrollPosition(anchor, element);\n  const rect = utils.eitherRect(domUtils.offset(anchor), offset);\n  const stackScale = 2 * scale;\n  const stackScroll = domUtils.stackingElementScroll(element);\n  if (scale !== 1 && stackScroll) {\n    stackScroll.x /= stackScale;\n    stackScroll.y /= stackScale;\n  }\n  const stackOffset = domUtils.stackingElementOffset(element);\n  if (scale !== 1 && stackOffset) {\n    stackOffset.left /= stackScale;\n    stackOffset.top /= stackScale;\n  }\n  return domUtils.removeScroll(domUtils.addScroll(utils.removeStackingOffset(utils.scaleRect(rect, scale), stackOffset), stackScroll), scrollPos);\n};\nconst relativeRect = (anchor, element, offset, scale) => {\n  const rect = utils.eitherRect(domUtils.position(anchor, element, scale), offset);\n  return utils.scaleRect(rect, scale);\n};\nconst elementScrollPosition = (anchor, element) => {\n  return anchor ? {\n    x: 0,\n    y: 0\n  } : domUtils.scrollPosition(element);\n};\nconst alignElement = settings => {\n  const {\n    anchor,\n    element,\n    anchorAlign,\n    elementAlign,\n    margin,\n    offset,\n    positionMode,\n    scale\n  } = settings;\n  const currentScale = scale || 1;\n  const fixedMode = positionMode === 'fixed' || !domUtils.hasOffsetParent(element);\n  const anchorRect = fixedMode ? absoluteRect(anchor, element, offset, currentScale) : relativeRect(anchor, element, offset, currentScale);\n  const elementRect = utils.scaleRect(domUtils.offset(element), currentScale);\n  const result = domUtils.align({\n    anchorAlign: anchorAlign,\n    anchorRect: anchorRect,\n    elementAlign: elementAlign,\n    elementRect: elementRect,\n    margin\n  });\n  return result;\n};\nexport default alignElement;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}