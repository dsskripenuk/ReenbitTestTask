{"ast":null,"code":"/* eslint-disable arrow-body-style */\nimport addScroll from \"./add-scroll\";\nimport align from './align';\nimport boundingOffset from './bounding-offset';\nimport utils from './utils';\nimport removeScroll from './remove-scroll';\nimport restrictToView from './restrict-to-view';\nimport scrollPosition from './scroll-position';\nimport offsetBase from './offset';\nimport positionWithScroll from './position-with-scroll';\nimport windowViewPort from './window-viewport';\nimport siblingContainer from './sibling-container';\nimport parents from './parents';\nconst STYLES = ['font-size', 'font-family', 'font-stretch', 'font-style', 'font-weight', 'line-height'];\nconst addOffset = (current, addition) => {\n  return {\n    left: current.left + addition.left,\n    top: current.top + addition.top\n  };\n};\nconst getWindow = () => {\n  return utils.canUseDOM() ? window : null;\n};\nconst getFontStyles = el => {\n  const window = getWindow();\n  if (!window || !el) {\n    return [];\n  }\n  const computedStyles = window.getComputedStyle(el);\n  return STYLES.map(font => ({\n    key: font,\n    value: computedStyles[font]\n  }));\n};\nconst hasOffsetParent = el => {\n  if (!el) {\n    return false;\n  }\n  return Boolean(el.offsetParent);\n};\nconst offset = el => {\n  if (!el) {\n    return null;\n  }\n  return offsetBase(el);\n};\nconst offsetAtPoint = (element, currentLocation) => {\n  if (!element) {\n    return null;\n  }\n  const {\n    left,\n    top,\n    transition\n  } = element.style;\n  element.style.transition = 'none';\n  element.style.left = `${currentLocation.left}px`;\n  element.style.top = `${currentLocation.top}px`;\n  const currentOffset = offsetBase(element);\n  element.style.left = left;\n  element.style.top = top;\n\n  // prevents elements with transition to be animated because of the change\n  // tslint:disable-next-line:no-unused-expression\n  element.offsetHeight;\n  element.style.transition = transition;\n  return currentOffset;\n};\nconst position = (element, popupElement, scale) => {\n  if (!element || !popupElement) {\n    return null;\n  }\n  const currentScale = scale || 1;\n  return positionWithScroll(element, popupElement, currentScale);\n};\nconst OVERFLOW_REGEXP = /auto|scroll/;\nconst overflowElementStyle = element => {\n  return `${element.style.overflow}${element.style.overflowX}${element.style.overflowY}`;\n};\nconst overflowComputedStyle = element => {\n  const styles = window.getComputedStyle(element);\n  return `${styles.overflow}${styles.overflowX}${styles.overflowY}`;\n};\nconst overflowStyle = element => {\n  return overflowElementStyle(element) || overflowComputedStyle(element);\n};\nconst scrollableParents = element => {\n  const parentElements = [];\n  if (!utils.canUseDOM()) {\n    return parentElements;\n  }\n  let parent = element.parentElement;\n  while (parent) {\n    if (OVERFLOW_REGEXP.test(overflowStyle(parent)) || parent.hasAttribute('data-scrollable')) {\n      parentElements.push(parent);\n    }\n    parent = parent.parentElement;\n  }\n  parentElements.push(window);\n  return parentElements;\n};\nconst getRelativeContextElement = el => {\n  if (!el || !utils.hasRelativeStackingContext()) {\n    return null;\n  }\n  let parent = el.parentElement;\n  while (parent) {\n    if (window.getComputedStyle(parent).transform !== 'none') {\n      return parent;\n    }\n    parent = parent.parentElement;\n  }\n  return null;\n};\nconst stackingElementOffset = el => {\n  const relativeContextElement = getRelativeContextElement(el);\n  if (!relativeContextElement) {\n    return null;\n  }\n  return offsetBase(relativeContextElement);\n};\nconst stackingElementScroll = el => {\n  const relativeContextElement = getRelativeContextElement(el);\n  if (!relativeContextElement) {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n  return {\n    x: relativeContextElement.scrollLeft,\n    y: relativeContextElement.scrollTop\n  };\n};\nconst stackingElementViewPort = el => {\n  const relativeContextElement = getRelativeContextElement(el);\n  if (!relativeContextElement) {\n    return null;\n  }\n  return {\n    height: relativeContextElement.scrollHeight,\n    width: relativeContextElement.scrollWidth\n  };\n};\nconst useRelativePosition = el => {\n  return Boolean(getRelativeContextElement(el));\n};\nconst zoomLevel = () => {\n  if (!utils.canUseDOM()) {\n    return 1;\n  }\n  return parseFloat((document.documentElement.clientWidth / window.innerWidth).toFixed(2)) || 1;\n};\nconst isZoomed = () => {\n  return zoomLevel() > 1;\n};\nconst zIndex = (anchor, container) => {\n  if (!anchor || !utils.canUseDOM()) {\n    return null;\n  }\n  const sibling = siblingContainer(anchor, container);\n  if (!sibling) {\n    return null;\n  }\n  const result = [anchor].concat(parents(anchor, sibling)).reduce((index, p) => {\n    const zIndexStyle = p.style.zIndex || window.getComputedStyle(p).zIndex;\n    const current = parseInt(zIndexStyle, 10);\n    return current > index ? current : index;\n  }, 0);\n  return result ? result + 1 : null;\n};\nconst domUtils = {\n  addOffset,\n  addScroll,\n  align,\n  boundingOffset,\n  getFontStyles,\n  getWindow,\n  hasOffsetParent,\n  offset,\n  offsetAtPoint,\n  position,\n  removeScroll,\n  restrictToView,\n  scrollPosition,\n  scrollableParents,\n  getRelativeContextElement,\n  stackingElementOffset,\n  stackingElementScroll,\n  stackingElementViewPort,\n  useRelativePosition,\n  windowViewPort,\n  zoomLevel,\n  isZoomed,\n  zIndex\n};\nexport default domUtils;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}